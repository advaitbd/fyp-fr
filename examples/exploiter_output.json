{
  "plan": {
    "setup_steps": [
      "Deploy the vulnerable lending contract",
      "Create an attacker contract with a fallback function that calls withdraw recursively",
      "Fund the vulnerable contract with ETH for demonstration",
      "Deposit some ETH from the attacker contract to establish a balance"
    ],
    "execution_steps": [
      "Call withdraw from the attacker contract for the initial amount deposited",
      "Within the fallback function of the attacker contract, check remaining balance in the vulnerable contract",
      "If balance remains, recursively call withdraw again",
      "Continue until vulnerable contract is drained or gas is exhausted"
    ],
    "validation_steps": [
      "Verify attacker contract has more ETH than initially deposited",
      "Verify vulnerable contract has less ETH than expected",
      "Demonstrate that fixing the order of operations (updating state before external call) prevents the attack"
    ]
  }
}